[project]
name = "prymer"
version = "3.0.2"
description = "Python primer design library"
authors = [
    { name = "Yossi Farjoun", email = "yossi@fulcrumgenomics.com" },
    { name = "Jeff Gentry", email = "jeff@fulcrumgenomics.com" },
    { name = "Tim Fennell", email = "tim@fulcrumgenomics.com" },
    { name = "Nils Homer", email = "nils@fulcrumgenomics.com" },
    { name = "Erin McAuley", email = "erin@fulcrumgenomics.com" },
    { name = "Matt Stone", email = "matt@fulcrumgenomics.com" },
]
requires-python = "~=3.12"
readme = "README.md"
license = "MIT"
keywords = [
    "bioinformatics",
    "genomics",
    "dna",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
	"Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
	"Typing :: Typed",
]
dependencies = [
    "pyproject_hooks>=1.0.0,<2",
    "pybedlite>=1.0.0,<2",
    "strenum>=0.4.15,<0.5",
    "fgpyo>=1.1.0,<2",
    "pysam>=0.23.0,<0.24",
    "ordered-set>=4.1.0,<5",
    "primer3-py>=2.0.3,<3",
    "pybwa>=2,<3",
]

[project.urls]
Homepage = "https://github.com/fulcrumgenomics/prymer"
Repository = "https://github.com/fulcrumgenomics/prymer"
Documentation = "https://github.com/fulcrumgenomics/prymer"
"Bug Tracker" = "https://github.com/fulcrumgenomics/prymer/issues"

[dependency-groups]
dev = [
    "black>=24.4.2,<25",
    "mypy>=1.14.1,<2",
    "pytest>=7.4.4,<8",
    "pytest-cov>=4.1.0,<5",
    "ruff==0.9.2",
    "pytest-doctestplus>=1.2.1,<2",
]
docs = [
    "markdown-callouts>=0.4.0",
    "mkdocs-autorefs>=0.5.0,<1.1.0",
    "mkdocs-include-markdown-plugin>=6.0.1",
    "mkdocs-material>=9.2.8",
    "mkdocs-table-reader-plugin>=2.0.1",
    "mkdocs>=1.5.2",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-section-index>=0.3.9",
    "mkdocstrings-python>=1.6.2",
    "mkdocstrings>=0.23.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.poe]
poetry_command = "task"

[tool.poe.tasks]
fix-format = "ruff format"
fix-lint = "ruff check --fix"

fix-all.ignore_fail = "return_non_zero"
fix-all.sequence = [
    "fix-format",
    "fix-lint"
]

check-lock = "uv lock --check"
check-format = "ruff format --check --diff"
check-lint = "ruff check"
check-tests = "pytest"
check-typing = "mypy"

check-all.ignore_fail = "return_non_zero"
check-all.sequence = [
    "check-lock",
    "check-format",
    "check-lint",
    "check-tests",
    "check-typing"
]

fix-and-check-all.ignore_fail = "return_non_zero"
fix-and-check-all.sequence = [
    "fix-all",
    "check-all"
]

[tool.mypy]
files                       = ["prymer", "tests"]
strict_optional             = false
# TODO: activate the following checks!
# strict_optional             = true
# strict_equality             = true
check_untyped_defs          = true
disallow_incomplete_defs    = true
disallow_untyped_calls      = true
disallow_untyped_decorators = true
disallow_untyped_defs       = true
no_implicit_optional        = true
warn_no_return              = true
warn_redundant_casts        = true
warn_return_any             = true
warn_unreachable            = true
warn_unused_configs         = true
warn_unused_ignores         = true
exclude = ["site/", "docs/"]

[[tool.mypy.overrides]]
module = "os"
disable_error_code = "attr-defined"

[[tool.mypy.overrides]]
module = "primer3"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.4"
addopts    = [
    "--import-mode=importlib",
    "--ignore=docs/scripts",
    "--color=yes",
    "--cov",
    "--cov-report=xml",
    "--cov-branch",
#    "--mypy",
#    "--ruff",
    "--doctest-plus",
    "--doctest-modules",
    "-v"
]
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS"
doctest_plus = "enabled"
testpaths = [
    "prymer", "tests"
]

[tool.ruff]
include = ["prymer/**/*.py", "tests/**/*.py"]
line-length    = 100
target-version = "py311"
output-format  = "full"

[tool.ruff.lint]
select    = [
    "ARG",    # Unused arguments
    "C901",   # McCabe complexity
    "B",      # bugbear
    "D",      # pydocstyle (docstrings. We have the "google" convention enabled)
    "D204",   # Blank line between class docstring and first (__init__) method
    "D213",   # Summary line should be located on the line after opening quotes
    "E",      # pycodestyle errors
    "LOG",    # flake8-logging
    "LOG015", # (preview rule) Prohibit calls to the root logger
    "F",      # pyflakes
    "I",      # isort
    "N",      # PEP8 naming
    "W",      # pycodestyle warnings
    "Q",      # flake8-quotes
]
ignore    = [
    "E203",
    "E701",
    "D212",  # summary line should be located on the same line as opening quotes
    "D100",  # missing docstring in public module
    "D104",  # missing docstring in public package
    # TODO: fixup the documentation so we can remove the following lints from the ignore list:
    "ARG001", # unused function argument
    "ARG003", # unused class method argument
    "D102",  # missing docstring in public method
    "D103",  # missing docstring in public function
    "D105",  # missing docstring in magic method
    "D107",  # missing docstring in __init__
    "D214",  # section is over-indented
    "D200",  # one-line docstring should fit on one line
    "D202",  # no blank lines allowed after function docstring
    "D205",  # 1 blank line required between summary line and description
    "D209",  # multi-line docstring closing quotes should be on a separate line
    "D213",  # multi-line docstring summary should start at the second line
    "D412",  # no blank lines allowed between a section header and its content ("Example")
    "D414",  # section has no content
    "D415",  # first line should end with a period, question mark, or exclamation point
    "D417",  # missing argument description in the docstring
    "F841",  # local variable `x` is assigned to but never used
    "N815",  # variable `x` in class scope should not be mixedCase
]
unfixable = ["B"]
# NB: only preview rules explicitly selected above (e.g. LOG015) will be enforced
preview = true
explicit-preview-rules = true

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.git-cliff.changelog]
header = ""
trim = true
body = """
{% for group, commits in commits | group_by(attribute="group") %}
    ## {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }} ({{ commit.id | truncate(length=8, end="") }})\
    {% endfor %}
{% endfor %}\n
"""

[tool.git-cliff.git]
conventional_commits = true
commit_parsers = [
    { message = "^.+!:*", group = "Breaking"},
    { message = "^feat*", group = "Features"},
    { message = "^fix*", group = "Bug Fixes"},
    { message = "^docs*", group = "Documentation"},
    { message = "^perf*", group = "Performance"},
    { message = "^refactor*", group = "Refactor"},
    { message = "^style*", group = "Styling"},
    { message = "^test*", group = "Testing"},
    { message = "^chore\\(release\\):*", skip = true},
    { message = "^chore*", group = "Miscellaneous Tasks"},
    { body = ".*security", group = "Security"}
]
filter_commits = false
